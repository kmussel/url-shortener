name: CI

on: 
  push:
    branches:
      - '**'
    tags-ignore:
      - "**"
    paths-ignore: # Don't trigger on files 
      - 'README.md'
      - 'Makefile'
      - '.devcontainer/**'
      - 'docker-compose.yml'
  pull_request:
  release:
    types:
      - created

# ON PR: github.head_ref = the branch

env:
  IMAGE_REPOSITORY: localhost/urlshortener


jobs:
  valid:
    runs-on: ubuntu-latest
    outputs:      
      canbuild: ${{ steps.build.outputs.canbuild }}

    steps:
    - name: dont rebuild tagged commits
      id: build
      shell: bash {0}
      if: github.event_name == 'push' || github.event_name == 'release'
      env:
        COMMIT_FILTER: '(^.*DNB$)|(v\d+\.\d+\.[^\s]+$)'
      run: |
        function testcommit {
          if [[ "${{ github.event_name }}" == "release" ]]; then
            filter_count=$(echo "${{ github.event.release.tag_name }}" | grep -c -P '(^.*DNB$)')
            echo "the last release tag \"${{ github.event.release.tag_name }}\" contains \"$filter_count\""
          else
            readonly local last_commit_log="${{ github.event.head_commit.message }}"
            filter_count=$(echo "$last_commit_log" | grep -c -P "$COMMIT_FILTER")
            echo "number of occurence of '$COMMIT_FILTER' in '$last_commit_log': $filter_count"
          fi
        }
        
        testcommit

        if [[ "$filter_count" -eq 0 ]]; then
          echo "all good, continue"
          echo "::set-output name=canbuild::true"
        else
          echo "Not Building"
          echo "::set-output name=canbuild::false"
        fi  

  build:
    needs: valid
    if: (needs.valid.outputs.canbuild == 'true')
    runs-on: ubuntu-latest

    outputs:      
      target: ${{ steps.buildenv.outputs.target }}
      tag: ${{ steps.buildenv.outputs.tag }}
      build_image: ${{ steps.build-image.outputs.build_image }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set release version info
        if: github.event_name == 'release'
        run: |
          echo "::set-env name=VERSION::${{ github.event.release.tag_name }}"
          echo "::set-env name=TARGET::prod"
      
      - name: Set commit version info
        if: github.event_name == 'push'
        run: |
          echo "::set-env name=VERSION::$(echo "$GITHUB_SHA" | cut -c1-7)"
          echo "::set-env name=TARGET::staging"

      - name: Set PR version info
        if: github.event_name == 'pull_request'
        run: |
          echo "::set-env name=VERSION::pr-${{ github.event.pull_request.number }}"
          echo "::set-env name=TARGET::staging"

      - name: Set build info
        run: |
          TAG=${TARGET}-${VERSION}
          echo "::set-env name=TAG::${TAG}"
          echo "::set-env name=IMAGE::${IMAGE_REPOSITORY}:${TAG}"
          echo "::set-env name=IMAGE_LATEST::${IMAGE_REPOSITORY}:${TARGET}-latest"
          echo "::set-env name=ASSET_CACHE::${IMAGE_REPOSITORY}:asset-${TARGET}-latest"


      - name: Build Docker Assets
        run: |
          DOCKER_BUILDKIT=1 docker build -f Dockerfile --cache-from ${ASSET_CACHE} --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg TARGET_ENV=prod -t ${ASSET_CACHE} --target assets .
            
      - name: Build docker build prod image
        run: |
          DOCKER_BUILDKIT=1 docker build -f Dockerfile --build-arg UI_IMAGE=${ASSET_CACHE} --cache-from ${IMAGE_LATEST} -t ${IMAGE} -t ${IMAGE_LATEST} --target final .

      - name: Build docker build test image
        run: |
          DOCKER_BUILDKIT=1 docker build -f Dockerfile --build-arg UI_IMAGE=${ASSET_CACHE} --cache-from ${IMAGE_LATEST} -t finaltest --target finaltest .          

      - name: Code Lint
        run: |
          docker run --rm finaltest yarn lint

      - name: Run Test
        run: |
          docker run --rm finaltest yarn test

      - name: Push docker image
        if: github.event_name != 'pull_request'
        id: build-image
        run: |
            echo "::set-output name=build_image::${IMAGE}"

      - name: Set Artifacts
        run: |            
            echo "TAG: ${TAG}" >> build_env.txt
            echo "TARGET: ${TARGET}" >> build_env.txt
            echo "IMAGE: ${IMAGE}" >> build_env.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v1
        if: ${{ always() }}
        with:
          name: build_info
          path: build_env.txt

      - name: Build Output
        id: buildenv
        if: ${{ always() }}
        run: |
          echo "::set-output name=target::${TARGET}"
          echo "::set-output name=tag::${TAG}"          
          

  deploy:
    if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: frenzylab/devcontainer:latest
      env:
        XDG_DATA_HOME: "/root/.local/share/"
    steps:
      - name: Set env
        run: |
          echo "::set-env name=TARGET::${{ needs.build.outputs.target }}"
          echo "::set-env name=TAG::${{ needs.build.outputs.tag }}"
          echo "::set-env name=BUILD_IMAGE::${{ needs.build.outputs.build_image }}"

      - name: PlaceHolder
        run: |
            echo "Handle deployment"


